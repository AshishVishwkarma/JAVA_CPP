For compilation: 
https://www.tutorialspoint.com/compile_cpp11_online.php
https://wandbox.org/

To read:
https://akrzemi1.wordpress.com/2013/06/05/intuitive-interface-part-i/
------------------------------------------------------------------------
The C++ specification does not make reference to any particular compiler, operating system, or CPU. It makes reference to an abstract machine that is a generalization of actual systems. In the Language Lawyer world, the job of the programmer is to write code for the abstract machine; the job of the compiler is to actualize that code on a concrete machine. By coding rigidly to the spec, you can be certain that your code will compile and run without modification on any system with a compliant C++ compiler, whether today or 50 years from now.

The abstract machine in C++11 is multi-threaded by design. It also has a well-defined memory model; that is, it says what the compiler may and may not do when it comes to accessing memory.

The default mode for atomic loads/stores in C++11 is to enforce sequential consistency. This just means all loads and stores must be "as if" they happened in the order you wrote them within each thread, while operations among threads can be interleaved.  
------------------------------------------------------------------------
No reference to bits.

copy constructor
copy assignment operator
Curiously Recurring Template Pattern (CRTP):

inline non-member function:

static:
A storage class can only be specified for objects and functions.
-----------------------------------------------------------------------
C++0x was the working name of a new ISO C++ standard, which was then released in 2011 as C++11 and introduces a host of new features into the standard C++ language and library. This project seeks to implement new C++11 features in GCC and to make it one of the first compilers to bring C++11 to C++ programmers.

C++11 features are available as part of the "mainline" GCC compiler in the trunk of GCC's Subversion repository and in GCC 4.3 and later. To enable C++0x support, add the command-line parameter -std=c++0x to your g++ command line. Or, to enable GNU extensions in addition to C++0x extensions, add -std=gnu++0x to your g++ command line. GCC 4.7 and later support -std=c++11 and -std=gnu++11 as well.

NOTE: Library support for map::emplace was added in gcc 4.8.
------------------------------------------------------------------------
A class declaration can contain static object of self type, it can also have pointer to self type, but it cannot have a non-static object of self type.
------------------------------------------------------------------------
const propagation:

------------------------------------------------------------------------
lvalue reference:
NOTE: Rvalues cannot bind to lvalue references (unless they are lvalue-references-to-const).
NOTE: Functions returning lvalues always return lvalue references.

NOTE: Employing pass-by-value for objects of an unknown type generally risks the performance hit of unnecessary copying, the behavioral problems of object slicing.
------------------------------------------------------------------------
function templates => templates that generate functions
template functions => the functions generated from function templates
------------------------------------------------------------------------
int func_13(){return 13;};
int x3(func_13()); => x3 is int with value as 13.
int x6(func_13); // error: invalid conversion from ‘int (*)()’ to ‘int’ [-fpermissive]
int func_int(int val){return 10*val;}
int x4(func_int(14)); => x4 is int with value as 140
//x4(); // error: ‘x4’ cannot be used as a function
int x5(int);
x5(10); // undefined reference to `x5(int)'

int x1 = 13;   => x1 is int with value as 13
int x2(13);    => x2 is int with value as 13
int y1 = {13}; => y1 is int with value as 13
int y2{13};    => y2 is int with value as 13

auto x1 = 13;   => x1 is int with value as 13
auto x2(13);    => x2 is int with value as 13
auto y1 = {13}; => y1 is std::initializer_list<int> with value as {13}
auto y2{13};    => y2 is std::initializer_list<int> with value as {13}

auto y3 = {1,2};
//auto y4{1,2}; // error: direct-list-initialization of ‘auto’ requires exactly one element [-fpermissive]
//auto y5 = {1,2,3.0}; // error: unable to deduce ‘std::initializer_list<_Tp>’ from ‘{1, 2, 3.0e+0}’

NOTE: auto type deduction is usually the same as template tye deduction, but auto assumes that a braced initalizer represents a std::initializer_list, and template type deduction doesn't.
So, if you declare a variable using auto and you initialize it with a braced initializer, the deduced type will always be std::initializer_list.
NOTE: auto in a function return type or lambda parameter implies template type deduction, not auto type deduction.
------------------------------------------------------------------------
decltype:
Applying decltype to a name yields the declared type for that name.
NOTE: Names are lvalue expressions.
NOTE: If an lvalue expression other than a name has type T, decltype reports that type as T&.
Inspects the declared type of an entity or the type and value category of an expression.
Note that if the name of an object is parenthesized, it is treated as an ordinary lvalue expression, thus decltype(x) and decltype((x)) are often different types.
Best use for decltype is declaring function templates where the function's return type depends on its parameter types.

int x = 0; 
decltype(x) => int
decltype((x)) => int&

Trailing retrun type:
A trailing return type has the advantage that the function's parameters can be used in the specification of the return type.

template<typename Container, typename Index> auto authAndAccess(Container&& c, Index i) -> decltype(std::forward<Container>(c)[i])
{
	authenticateUser();
	return std::forward<Container>(c)[i];
}
------------------------------------------------------------------------
There is no such thing as a function parameter that is an array.
void func(char name[]) => void func(char* name), here array declaration is treated as a pointer declaration.
NOTE: void func(char name[13]) => void func(char* name)
But, we can declare function parameters to be references of arrays!
void func(char (&refName)[13]) 
const char (&)[13] => reference to array of const char of size 13.

void gfunc(char name[13]){}
void gfunc2(char (&refName)[13]){}
void gfunc3(char(*ptrArray)[13]){cout << "address1 = " << (int*)ptrArray << ", address2 = " << (int*)(ptrArray+1) << endl;}
void main(){
	char name[13] = "Hello world!";
	char name2[12] = "Welcome!";
	gfunc(name); // OK
	gfunc(name2); // OK
	gfunc2(name); // OK
	gfunc2(name2); // error: invalid initialization of reference of type ‘char (&)[13]’ from expression of type ‘char [12]’
	gfunc3(name); // error: cannot convert ‘char*’ to ‘char (*)[13]’ for argument ‘1’ to ‘void gfunc3(char (*)[13])’
	char (*ptrName)[13] = &name;
	gfunc3(ptrName); // address1 = 0x7ffccc367c31, address2 = 0x7ffccc367c3e
}

NOTE: Prefer a std::array to a built-in array.
------------------------------------------------------------------------
Type Trait : [<type_traits>]
There are times in generic programming when generic just isn't good enough -- sometimes the differences between types are too great for an efficient generic implementation. This is when the traits technique becomes important.
Properties that are very dependent on the types and vary from type-to-type are encapsulated into a trait class.
Type Traits minimize the amount of code that has to differ from one type to another, and maximize the amount of generic code.

baggage class: A collection of type-specific properties wrapped up in a single class.

char_traits: [char, wchar_t]
------------------------------------------------------------------------
Lambda:
functor vs closure:
Closures hold copies of or references to the captured data.
A by-reference capture causes a closure to contain a reference to a local variable or to a parameter that's available in the scope where the lambda is defined.
Closures can be copied.

function call operator:
------------------------------------------------------------------------
Thread exhaustion
Over-subscription
Load balancing

Launch policy

Thread pool:
Work stealing algorithm:
double-checked locking pattern:

------------------------------------------------------------------------
Using MinGW:
COMMAND PROMT:
	C:
	
	g++ --version
	=> g++ (GCC) 4.9.3
	   Copyright (C) 2015 Free Software Foundation, Inc.
	   This is free software; see the source for copying conditions.  There is NO
	   warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	   
	cd C:\AshishV\Sample_Code
	g++ -std=c++11 main.cpp
	
TO SETUP ECLIPSE FOR C++11:
	Right click on the project and select "properties".
	Under "GCC C++ Compiler" select 'Miscellaneous'.
	Append 'Other flags' with -std=c++11
    Click on the 'Apply'.	
	
------------------------------------------------------------------------
Interface:
Interfaces provide a convenient means of resolving the tension that sometimes occurs between what a class is and what it can do. 
Although the word "interface" is not a reserved word in C++, there are at least three good ways to express the design intent of interfaces in C++.
- Using multiple inheritance.
- Compile-time binding using templates.
- Application of the Adapter design pattern.

Difference between inheritance and interface:
The design goal of using interfaces is mostly concerned with expressing what a class can do, as opposed to what a class is.
The interface name can be used as a reference to a heterogeneous set of objects that implement that interface.

Difference between abstract class and interface:

Using multiple inheritance, C++ developers can create a "dual aspect inheritance scheme." In this scheme they express, as needed:
- A primary superclass that might provide some shared implementation.
- Additional lines of inheritance that mix in purely abstract classes.
The purely abstract classes contain only pure virtual functions, and their declaration effectively imposes an interface requirement.

Anonymous Interfaces from Templates:
The template function requires a certain interface to be implemented by the class of its argument. However, rather than name the interface, you simply assume the required elements are present. When you pass an object to the function, a version of the function matching the type of the argument is created by the C++ template instantiation mechanism. If the members of the class passed to the function don't match the function's actual interface requirements, compile-time errors (citing missing or type-mismatched elements) will result.
	Function templates are arguably more convenient than formally implementing named interfaces. The only downside is that the level of cooperation needed to provide a certain set of public elements across all classes may be difficult to acquire. When named interfaces are used, the compiler helps a great deal more with the enforcement aspect of implementing interfaces. Templates are instantiated only for a specific type when that type is used with the template. Thus, detecting errors of interface compliance for a specific type may be arbitrarily delayed until the first situation is created pairing it with the template.

------------------------------------------------------------------------
Local class:
A local class is declared within a function definition. Declarations in a local class can only use type names, enumerations, static variables from the enclosing scope, as well as external variables and functions (including global types).
	void method1(){
		class LocalClass{
			....
		}
	}
Member functions of a local class have to be defined within their class definition, if they are defined at all. As a result, member functions of a local class are inline functions.
A local class cannot have static data members. It may contain static functions though.
An enclosing function has no special access to members of the local class.
------------------------------------------------------------------------
Nested class:
A nested class is declared within the scope of another class. The name of a nested class is local to its enclosing class. Unless you use explicit pointers, references, or object names, declarations in a nested class can only use visible constructs, including type names, static members, and enumerators from the enclosing class and global variables.

Member functions of a nested class follow regular access rules and have no special access privileges to members of their enclosing classes. Member functions of the enclosing class have no special access to members of a nested class. 

You can define member functions and static data members of a nested class in namespace scope. 
class outside
{
public:
      class nested
      {
      public:
            static int x;
            static int y;
            int f();
            int g();
      };
};
int outside::nested::x = 5;
int outside::nested::f() { return 0; };

typedef outside::nested outnest;       // define a typedef
int outnest::y = 10;                   // use typedef with ::
int outnest::g() { return 0; };
NOTE: Using a typedef to represent a nested class name hides information and may make the code harder to understand.
You cannot use a typedef name in an elaborated type specifier. e.g., class outnest obj; // Error
class A {
private:
	class B { };
	B *z;

	class C : private B {
	private:
		B y;
		// A::B y2;
		C *x;
		// A::C *x2;
	};
};
------------------------------------------------------------------------
Anonymous class:
Anonymous class is a class which has no name given to it. C++ supports this feature.
- These classes cannot have a constructor but can have a destructor.
- These classes can neither be passed as arguments to functions nor can be used as return values from functions.
class {
	....
} obj;

typedef class {
	....
} myClass;
myClass obj;
------------------------------------------------------------------------
Abstract class:
To make a class abstract declare a pure virtual function in the class.
NOTE: Even though we can define the pure virtual function out-side the class, the compiler will still treat the class as abstract class. The compiler will treat the derived class as abstract too if the pure virtual function is not defined in the derived class.

class AbsBase{
	protected:
		int data;
	public:
		int getData(){return data;}
		virtual void setData(int val) = 0;
};

void AbsBase::setData(int val){data = val; cout << "AbsBase::setData()" << endl;}

class ConDerived : public AbsBase{
	public:
		void setData(int val){data = 10*val;}
};

class ConDerived2 : public AbsBase{}; // No definition for setData()

void inSomeFunction(){
	//AbsBase absObj; // error: cannot declare variable ‘absObj’ to be of abstract type ‘AbsBase’
	//AbsBase* ptrAbs = new AbsBase(); // error: invalid new-expression of abstract class type ‘AbsBase’
	//AbsBase& refAbs = ConDerived(); // error: cannot bind non-const lvalue reference of type ‘AbsBase&’ to an rvalue of type ‘AbsBase’
	ConDerived conObj; // OK
	conObj.AbsBase::setData(5);
	cout << "Current data value = " << conObj.getData() << endl; // AbsBase::setData() \n Current data value = 5
	AbsBase& refAbs = conObj; // OK
	AbsBase* ptrAbs = new ConDerived(); // OK
	//ConDerived2 con2Obj; // error: cannot declare variable ‘con2Obj’ to be of abstract type ‘ConDerived2’
	//AbsBase* ptrAbs2 = new ConDerived2(); // error: invalid new-expression of abstract class type ‘ConDerived2’
}
------------------------------------------------------------------------
Exceptions:
Asynchronous exception:
Synchronous exception:

NOTE: Exception from CTOR can be handled (caught) while exception from DTOR cannot be.
NOTE: When the terminate_handler is called because no matching exception handler was found, it is implementation-defined whether the stack is unwound and local objects are destroyed.
std::unexpected(): [<exception>]
	Calls the current unexpected handler.
	By default, the unexpected handler calls terminate. But this behavior can be redefined by calling set_unexpected.
	This function is automatically called when a function throws an exception that is not listed in its dynamic-exception-specifier (i.e., in its throw specifier).

Exceptions and threads:
------------------------------------------------------------------------
Collections provide value semantic.

rvalues: anonymous temporary that can appear only on the right hand side of an assignment.

Moving an object having a member object of some class type:
1. The member object follows move semantic
2. the member object does not follow move semantic

-------------------------------------------------------------------------
Explicit:
Prefixing the explicit keyword to the constructor prevents the compiler from using that constructor for implicit conversions.	
-------------------------------------------------------------------------
NOTE: References are not integral type.
e.g., int&
-------------------------------------------------------------------------
SFINAE:
enable_if
std::decay
std::is_same
std::is_base_of
std::is_constructible
std::result_of
static_assert()
std::function<>
