import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Closeable;
import java.io.IOException;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.HashMap;
import java.util.TimerTask;
import java.util.Date;
import java.util.TimeZone;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Properties;






import java.sql.Connection;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.CallableStatement;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.sql.Timestamp;
import java.sql.DriverManager;
import com.sybase.jdbcx.SybConnection;
import com.sybase.jdbcx.EedInfo;
import com.sybase.jdbcx.SybMessageHandler;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.net.InetAddress;
import java.net.UnknownHostException;


import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.ParseException;


import java.lang.management.ManagementFactory;
import java.lang.management.RuntimeMXBean;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


import org.springframework.validation.Errors;

import java.io.FileInputStream;
import org.apache.poi.util.IOUtils;
import org.apache.shiro.codec.CodecSupport;
import org.apache.shiro.crypto.AesCipherService;
import org.apache.shiro.util.ByteSource;

import java.util.Scanner;

import static org.junit.Assert.*;

import org.apache.xpath.XPathAPI;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.traversal.NodeIterator;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;


import gnu.getopt.Getopt;


import com.rbs.gbm.risk.framework.core.cache.Cache;
import com.rbs.gbm.risk.framework.core.util.Loadable;
import com.rbs.gbm.risk.framework.core.util.DataLoader;
import com.rbs.gbm.risk.framework.core.util.DataSet;
import com.rbs.gbm.risk.framework.core.sql.SPRequest;
import rbos.fm.mktrisk.sql.GlobalConnectionCreationError;
import rbos.fm.mktrisk.sql.GlobalConnectionPoolContext;
import rbos.fm.mktrisk.sql.QueryResults;

import com.rbos.fm.risk.sabre.service.IStoredProcedureExecutor;
[package com.rbos.fm.risk.sabre.service.impl;]

public final class

System.getProperty

Collections.synchronizedMap
Collections.emptyMap()

finally

Exceptions:
	java.rmi.RemoteException
	
	
this();
super.setTime(time);
private transient HolidayCalendar calendar;
public static final String REGION_KEY = "REGION";
private Day(Day day){}	// copy ctor

System.getProperty(...);
Class.forName(className).newInstance();
Proxy.newProxyInstance(....);
Runtime.getRuntime().addShutdownHook(new Thread(new ContextManagerShutdownHook()));


public class AAA implements Interface1 {
	:
	public static class BBB implements Interface3 {
		:
	}
	public interface Interface3 {
		:
	}
	public static class CCC implements Interface4 {
		private final int data;
		:
		public CCC(int value){this.data = value}
		private synchronized Date internalGetDate(String type){}
	}
	
}


public abstract interface Interface1 {
	public static final Interface1 NoOp = new Interface1() {
		public void method1(){...}
		public void method2(int){...}
		public void method3(Object){...}
		public Object method4(Interface2 param){...}
	};
	
	public abstract void method1();
	public abstract void method2(int);
	public abstract void method3(Object);
	public abstract Object method4(Interface2 param);
	
	public static class Impl1Interface1 implements Interface1 {
		private final Map map;
		
		public void method1(){...}
		public void method2(int){...}
		public void method3(Object){...}
		public Object method4(Interface1.Interface2 param){...}
	}
	
	public static class Impl2Interface1 implements Interface1 {
		private final Interface1 inf;
		private Object LOCK = new Object();
		
		public Impl2Interface1(){...}
		public Impl2Interface1(Interface1 inf){this.inf = inf;}
		
		public void method1(){this.inf.method1();}
		public void method2(int data){this.inf.method2(data);}
		public void method3(Object obj){this.inf.method3(obj);}
		public Object method4(Interface1.Interface2 param){return this.LOCK;}
	}
	
	public static abstract class DefaultImplBase implements Interface1{
		protected DefaultImplBase(){....}
		
	}
	
	public static class ImplBase extends Interface1.DefaultImplBase {
		public ImplBase() {....}
				
		public void method1(){...}
		public void method2(int){...}
		public void method3(Object){...}
		public Object method4(Interface1.Interface2 param){...}
	}
	
	public static abstract interface Interface2{
		public static final Interface2 INTERFACE2 = new Interface2(){
			public boolean method1(string str){return true;}
		};
		public abstract boolean method1(string str);
	}
}

public class pclass1{
	private final Interface1.Interface2 IMPL2 = new Interface1.Interface2(){
		public boolean method1(string str){
			return str.compare("Test");
		}
	};
	
	private final Interface1.Impl2Interface1 impl2;
	
	public pclass1(){
		this.impl2 = new Interface1.Impl2Interface1();
	}
	
	public void syncMethod(){
		long startTime = System.currentTimeMillis();
		// synchronised over object
		synchronized (this.impl2.method4()){
			....
		}
	}
}


NOTE: Java code is semantically poor in terms of software design. Example: It is sometimes hard to "detect" design patterns in reverse engineered code since the code itself provides no dedicated information about applied patterns (identifier names or comments are not analyzed by the reverse engineering tool).
============================================================================================
XPath 2.0 : https://www.w3.org/TR/xpath20/
XML 1.0 : https://www.w3.org/TR/2004/REC-xml-20040204/#dt-root
		: https://www.w3.org/TR/xml/
		
DOM Level 3 Core : https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/

Web Specifications: https://www.w3.org/TR/

org.apache.xpath.XPathAPI : https://xml.apache.org/xalan-j/apidocs/org/apache/xpath/XPathAPI.html

JUnit: http://junit.sourceforge.net/javadoc/org/junit/package-summary.html

Apache license

https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html

Memory layout of java object

Java EE example: https://javaee.github.io/firstcup/creating-example001.html#GKHQT

Resource management in java

To avoid inheritance

Collections
Java beans
Spring
source-level metadata attributes
dynamic proxies
distributed business objects


https://docs.oracle.com/javase/tutorial/collections/interfaces/order.html

